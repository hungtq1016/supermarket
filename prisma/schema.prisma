datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Product {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String    @unique
  slug       String    @unique
  detail     String
  image      Image?    @relation(fields: [imageId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  imageId    String?   @unique @db.ObjectId
  variants   Variant[]
  categoryId String?   @db.ObjectId
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parent     Product?  @relation("ParentChildren", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentId   String?   @db.ObjectId
  children   Product[] @relation("ParentChildren")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Variant {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  product   Product   @relation(fields: [productId], references: [id])
  productId String    @db.ObjectId
  price     Float
  discount  Float?
  quantity  Int
  count     Int
  color     Color?    @relation(fields: [colorId], references: [id])
  colorId   String?   @db.ObjectId
  images    Image[]
  comments  Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Image {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  url       String
  alt       String
  variant   Variant?  @relation(fields: [variantId], references: [id])
  variantId String?   @db.ObjectId
  product   Product?
  category  Category?
}

model Color {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  code     String?
  variants Variant[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Comment {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  comment   String
  rating    Int
  variant   Variant @relation(fields: [variantId], references: [id])
  variantId String  @db.ObjectId
  user      User    @relation(fields: [userId], references: [id])
  userId    String  @db.ObjectId
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Category {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String     @unique
  slug      String     @unique
  products  Product[]
  image     Image?     @relation(fields: [imageId], references: [id])
  imageId   String?    @unique @db.ObjectId
  parent    Category?  @relation("ParentChildren", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentId  String?    @db.ObjectId
  children  Category[] @relation("ParentChildren")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  email          String    @unique
  name           String
  verifyEmail    Boolean   @default(false)
  hashedPassword String
  address        String    @default("Chưa có địa chỉ")
  comment        Comment[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}
